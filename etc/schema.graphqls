
type Query {

    lofProductListNewArrival(
        search: String @doc(description: "Performs a full-text search using the specified key words."),
        filter: ProductFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
    ):LofProductList @resolver(class: "\\Lof\\ProductListGraphQl\\Model\\Resolver\\NewArrival") @doc(description: "The products query searches for products that match the criteria specified in the search and filter attributes")

    lofProductListLatest(
        search: String @doc(description: "Performs a full-text search using the specified key words."),
        filter: ProductFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
    ):LofProductList @resolver(class: "\\Lof\\ProductListGraphQl\\Model\\Resolver\\Latest") @doc(description: "The products query searches for products that match the criteria specified in the search and filter attributes")

    lofProductListBestseller(
        search: String @doc(description: "Performs a full-text search using the specified key words."),
        filter: ProductFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
    ):LofProductList @resolver(class: "\\Lof\\ProductListGraphQl\\Model\\Resolver\\BestSeller") @doc(description: "The products query searches for products that match the criteria specified in the search and filter attributes")

    lofProductListRandom(
        search: String @doc(description: "Performs a full-text search using the specified key words."),
        filter: ProductFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
    ):LofProductList @resolver(class: "\\Lof\\ProductListGraphQl\\Model\\Resolver\\Random") @doc(description: "The products query searches for products that match the criteria specified in the search and filter attributes")

    lofProductListTopRated(
        search: String @doc(description: "Performs a full-text search using the specified key words."),
        filter: ProductFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
    ):LofProductList @resolver(class: "\\Lof\\ProductListGraphQl\\Model\\Resolver\\TopRated") @doc(description: "The products query searches for products that match the criteria specified in the search and filter attributes")

    lofProductListSpecial(
        search: String @doc(description: "Performs a full-text search using the specified key words."),
        filter: ProductFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
    ):LofProductList @resolver(class: "\\Lof\\ProductListGraphQl\\Model\\Resolver\\Special") @doc(description: "The products query searches for products that match the criteria specified in the search and filter attributes")

    lofProductListDeals(
        search: String @doc(description: "Performs a full-text search using the specified key words."),
        filter: ProductFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
    ):LofProductList @resolver(class: "\\Lof\\ProductListGraphQl\\Model\\Resolver\\Deals") @doc(description: "The products query searches for products that match the criteria specified in the search and filter attributes")

    lofProductListFeatured(
        search: String @doc(description: "Performs a full-text search using the specified key words."),
        filter: ProductFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
    ):LofProductList @resolver(class: "\\Lof\\ProductListGraphQl\\Model\\Resolver\\Featured") @doc(description: "The products query searches for products that match the criteria specified in the search and filter attributes")

}



type LofProduct {
    entity_id: Int @doc(description: "The ID number assigned to the product.")
    attribute_set_id: String @doc(description: "Attribute Set Id.")
    required_options: String @doc(description: "Required Options.")
    name: String @doc(description: "Product Name.")
    sku: String @doc(description: "A number or code assigned to a product to identify the product, options, price, and manufacturer.")
    description: String @doc(description: "Detailed information about the product. The value can include simple HTML tags.")
    attribute_set_id: Int @doc(description: "The attribute set assigned to the product.")
    image: String @doc(description: "The relative path to the main image on the product page.")
    small_image: String @doc(description: "The relative path to the small image, which is used on catalog pages.")
    thumbnail: String @doc(description: "The relative path to the product's thumbnail image.")
    options_container: String @doc(description: "If the product has multiple options, determines where they appear on the product page.")
    created_at: String @doc(description: "Timestamp indicating when the product was created.")
    updated_at: String @doc(description: "Timestamp indicating when the product was updated.")
    country_of_manufacture: String @doc(description: "The product's country of origin.")
    type_id: String @doc(description: "One of simple, virtual, bundle, downloadable, grouped, or configurable.") @deprecated(reason: "Use __typename instead.")
    price: String @deprecated(description: "Use price_range for product price information.")
    url_key: String @deprecated(description: "Url Key.")
    activity: String @deprecated(description: "Activity.")
    material: String @deprecated(description: "Material.")
    category_gear: String @deprecated(description: "Category Gear.")
}

type LofProductList {
    total_count: Int @doc(description: "The number of products returned")
    items: [LofProduct] @doc(description: "An array of products that match the specified search criteria")
}

input ProductFilterInput @doc(description: "ProductFilterInput is deprecated, use @ProductAttributeFilterInput instead. ProductFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for.") {
    entity_id: FilterTypeInput @doc(description: "Product ID")
    sku: FilterTypeInput @doc(description: "Product SKU")
    name: FilterTypeInput @doc(description: "Name")
    attribute_set_id: FilterTypeInput @doc(description: "Attribute Set Id")
    type_id: FilterTypeInput @doc(description: "Type ID")
    price: FilterTypeInput @doc(description: "Price")
    url_key: FilterTypeInput @doc(description: "URL Key")
    or: ProductFilterInput @doc(description: "The keyword required to perform a logical OR comparison.")
}
